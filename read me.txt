対象：初めてのgit


解説が必要な項目とハンズオンで実施してもらう箇所を色分けする。


git とは？
ソースコードを管理するtoolsです。
issueやwikiの機能もあるし、様々なtoolsと連携する事が可能です。
複数人でソースコードを書いて一つのリポジトリにcommitします。
（触っていくと徐々に理解が深まると思います）
https://qiita.com/gold-kou/items/7f6a3b46e2781b0dd4a0

git flow(参考)
https://qiita.com/homhom44/items/9f13c646fa2619ae63d0


ブランチの簡単な説明
master
世の中に出て良いモジュールのみが入っているもの。
又は、リリースされているソースコード。


develop
開発時にmasterから複製されるリポジトリ。
master同様、不具合のあるモジュールは基本的に含まない。


feature
実装時にdevelopから複製されるリポジトリ。
作成する機能単位などで複製し、作業が完了したら削除する（ライフサイクル）
featureブランチは、必ずしも不具合のないモジュールのみであるとは限らない。


ローカルリポジトリとリモートリポジトリ
https://backlog.com/ja/git-tutorial/intro/02/
読んだら分かるかな？


git command


gitを操作する場合、GUIとCUIでの操作が選択できます。
極論では好みですが、CUI（git command)を覚えて損はないです。


誰しもが一度は見るであろうサイト


絶対に理解して欲しいコマンド
add：gitの管理対象にする（commitする為）
commit：ローカルリポジトリに保存する（addされたものだけ）
push：リモートリポジトリに保存する
pull：ローカルリポジトリとリモートリポジトリの差分がある場合に、リモートリポジトリにある差分をローカルリポジトリにも反映させる
余力があれば理解して欲しいコマンド


checkout [branch名]: 指定したブランチへ向き先を変える
checkout [ソース]: 指定したソースを元に戻す
checkout -b: ブランチを作成する
branch：存在するbranchを一覧表示する
        branch {branch名}：branchを作成する
diff: 変更点の差分を表示する
remote add: リポジトリを追加する
        remote -v: どのリモートリポジトリを参照しているのかを確認する




更に余力があれば理解して欲しいコマンド


rebase：履歴を一本に？
merge：他のブランチの更新を取り込む処理
stash：現在の作業を一時的に退避
amend：先頭のコミットを修正
checkout：ブランチ移動
log：コミットログを確認
status：branch内のステータス（差分のあるファイル）等を確認する
revert：指定したコミットの内容を打ち消すコミットを作り出す